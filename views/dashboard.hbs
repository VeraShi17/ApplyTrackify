<div class="accordion" id="dashboardAccordion">
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingToday">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseToday" aria-expanded="true" aria-controls="collapseToday">
        Today's Deadlines
      </button>
    </h2>
    <div id="collapseToday" class="accordion-collapse collapse show" aria-labelledby="headingToday">
      <div class="accordion-body">
        {{#each todayTrackers}}
          <p>{{this.university}} - {{this.program}} - <a href="/dashboard/{{this.graduateTrackerList.slug}}">{{this.graduateTrackerList.name}}</a></p>
        {{/each}}
        {{#unless todayTrackers.length}}
          <p>No trackers due today.</p>
        {{/unless}}
      </div>
    </div>
  </div>
  <div class="accordion-item">
    <h2 class="accordion-header" id="headingRecent">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseRecent" aria-expanded="false" aria-controls="collapseRecent">
        Recent Deadlines
      </button>
    </h2>
    <div id="collapseRecent" class="accordion-collapse collapse" aria-labelledby="headingRecent">
      <div class="accordion-body">
        {{#each recentTrackers}}
          <p>{{this.university}} - {{this.program}} - <a href="/dashboard/{{this.graduateTrackerList.slug}}">{{this.graduateTrackerList.name}}</a> - {{this.deadline}}</p>
        {{/each}}
        {{#unless recentTrackers.length}}
          <p>No recent trackers found.</p>
        {{/unless}}
      </div>
    </div>
  </div>
</div>


<div class="list-group">
  {{#each lists as |list|}}
    <div class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
      <a href="/dashboard/{{list.slug}}">{{list.name}}</a>
      <div class="d-grid gap-2 d-md-block">
        {{!-- <button class="btn btn-primary" type="button">Rename</button> --}}
        <button class="btn btn-primary btn-rename" data-slug="{{list.slug}}" onclick="renameList('{{list.slug}}')">Rename</button>

        <!-- Delete Form -->
        <form class="delete-form" action="/dashboard/delete-list" method="POST">
            <input type="hidden" name="slug" value="{{list.slug}}">
            <button class="btn btn-secondary" type="submit">Delete</button>
        </form>
      </div>
    </div>
  {{/each}}
  <div class="list-group-item" id="creater">
    <form id="create-list-form" action="/dashboard/create-list" method="POST" class="d-flex justify-content-between align-items-center">
      <input type="text" name="listName" class="form-control" placeholder="List name" aria-label="List name">
      <button type="submit" class="btn btn-primary">Create a new list</button>
    </form>
  </div>
</div>
<div id="trackerCalendar"></div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@5/main.min.css' rel='stylesheet' />
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@5/main.min.js'></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const renameButtons = document.querySelectorAll('.btn-rename');
  renameButtons.forEach(button => {
    button.addEventListener('click', function() {
      const slug = this.dataset.slug; // Assuming data-slug attribute is set on each button
      Swal.fire({
        title: 'Enter the new name for the list',
        input: 'text',
        inputAttributes: {
          autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'Rename',
        showLoaderOnConfirm: true,
        preConfirm: (newName) => {
          if (!newName) {
            Swal.showValidationMessage(`Please enter a new name.`);
          } else {
            return fetch('/dashboard/rename-list', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ slug, newName }),
            })
            .then(response => {
              if (!response.ok) {
                throw new Error('Failed to rename list');
              }
              return response.json();
            })
            .catch(error => {
              Swal.showValidationMessage(`Request failed: ${error}`);
            });
          }
        },
        allowOutsideClick: () => !Swal.isLoading()
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: `List renamed successfully!`,
            icon: 'success'
          }).then(() => {
            window.location.reload();
          });
        }
      });
    });
  });

  const deleteForms = document.querySelectorAll('.delete-form');
  deleteForms.forEach(form => {
    form.addEventListener('submit', function(event) {
      event.preventDefault();
      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          form.submit();
        }
      });
    });
  });

  // FullCalendar setup
  var calendarEl = document.getElementById('trackerCalendar');
  var calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: 'dayGridMonth',
    events: [
      {{#each allTrackers}}
      {
        title: '{{this.university}} - {{this.program}}',
        start: '{{this.deadline}}',
        url: '/dashboard/{{this.graduateTrackerList.slug}}'
      },
      {{/each}}
    ]
  });
  calendar.render();
});
</script>
<script>
document.querySelector('#create-list-form').addEventListener('submit', function(event) {
  event.preventDefault();
  const formData = new FormData(this);
  fetch('/dashboard/create-list', {
    method: 'POST',
    body: JSON.stringify({
      listName: formData.get('listName')
    }),
    headers: {
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.slug) {
      Swal.fire({
        title: 'Success!',
        text: data.message,
        icon: 'success',
        confirmButtonText: 'OK'
      }).then((result) => {
        if (result.isConfirmed) {
          window.location.href = `/dashboard/${data.slug}`;
        }
      });
    } else {
      Swal.fire({
        title: 'Error!',
        text: data.message,
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  })
  .catch(error => {
    Swal.fire({
      title: 'Error!',
      text: 'Something went wrong!',
      icon: 'error',
      confirmButtonText: 'OK'
    });
  });
});
</script>
<style>
    :root {
        --bs-primary: rgb(248, 168, 172);
    }

    .fc-event {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
        color: white;
    }
</style>
